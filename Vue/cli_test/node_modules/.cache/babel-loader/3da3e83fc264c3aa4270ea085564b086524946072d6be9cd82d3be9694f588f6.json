{"ast":null,"code":"import pubsub from 'pubsub-js';\nimport { nextTick } from \"vue\";\nexport default {\n  name: \"MyItem\",\n  // 声明接收todo对象\n  props: ['todo'],\n  methods: {\n    // 勾选\n    handleCheck(id) {\n      // this.checkedTodo(id),\n      this.$bus.$emit('checkTod', id);\n    },\n    // 删除\n    handledelete(id) {\n      if (confirm('确定删除吗')) {\n        // 通知App删除对应项\n        // this.deleteTodo(id)\n        // this.$bus.$emit('deleteTodo', id)\n        pubsub.publish('deleteTodo', id);\n      }\n    },\n    // 编辑\n    handleEdit(todo) {\n      // 如果todo身上有isEdit可以直接改\n      if (todo.hasOwnProperty.call('isEdit')) {\n        console.log('todo身上有isEdit');\n        todo.isEdit = true;\n      } else {\n        console.log('todo身上没有isEdit');\n        this.$set(todo, 'isEdit', true);\n      }\n      // 因为Vue会将这个函数执行走完才会去解析模板，而在给输入框获取焦点时，输入框还没有显示在页面上，所以不奏效，可以用延迟定时器解决\n      // setTimeout(() => {\n      //   this.$refs.inputTitle.focus()\n      // }, 200)\n\n      // 官方提供的一个解决方法\n      // nextTick中的回调函数会在DOM节点更新之后执行\n      this.$nextTick(function () {});\n      // 页面不会实时刷新\n      // todo.isEdit = true\n    },\n\n    // 失去焦点回调（真正执行修改逻辑）\n    handleBlur(todo, e) {\n      todo.isEdit = false;\n      if (!e.target.value.trim()) return alert('输入不能为空！');\n      this.$bus.$emit('updateTodo', todo.id, e.target.value);\n    }\n  }\n};","map":{"version":3,"names":["pubsub","nextTick","name","props","methods","handleCheck","id","$bus","$emit","handledelete","confirm","publish","handleEdit","todo","hasOwnProperty","call","console","log","isEdit","$set","$nextTick","handleBlur","e","target","value","trim","alert"],"sources":["src/components/MyItem.vue"],"sourcesContent":["<template>\r\n  <li>\r\n    <label>\r\n      <!--      change属性：发生变化时调用-->\r\n      <input :checked=\"todo.done  \" type=\"checkbox\" @change=\"handleCheck(todo.id)\"/>\r\n      <span v-show=\"!todo.isEdit\">{{ todo.title }}</span>\r\n      <input v-show=\"todo.isEdit\"\r\n             ref=\"inputTitle\"\r\n             :value=\"todo.title\"\r\n             type=\"text\"\r\n             @blur=\"handleBlur(todo,$event)\">\r\n    </label>\r\n    <button class=\"btn btn-danger\" @click=\"handledelete(todo.id)\">删除</button>\r\n    <button v-show=\"!todo.isEdit\" class=\"btn btn-edit\" @click=\"handleEdit(todo)\">编辑</button>\r\n\r\n  </li>\r\n</template>\r\n\r\n<script>\r\nimport pubsub from 'pubsub-js'\r\nimport {nextTick} from \"vue\";\r\n\r\nexport default {\r\n  name: \"MyItem\",\r\n  // 声明接收todo对象\r\n  props: ['todo'],\r\n  methods: {\r\n    // 勾选\r\n    handleCheck(id) {\r\n      // this.checkedTodo(id),\r\n      this.$bus.$emit('checkTod', id)\r\n    },\r\n    // 删除\r\n    handledelete(id) {\r\n      if (confirm('确定删除吗')) {\r\n        // 通知App删除对应项\r\n        // this.deleteTodo(id)\r\n        // this.$bus.$emit('deleteTodo', id)\r\n        pubsub.publish('deleteTodo', id)\r\n      }\r\n    },\r\n    // 编辑\r\n    handleEdit(todo) {\r\n      // 如果todo身上有isEdit可以直接改\r\n      if (todo.hasOwnProperty.call('isEdit')) {\r\n        console.log('todo身上有isEdit')\r\n        todo.isEdit = true\r\n      } else {\r\n        console.log('todo身上没有isEdit')\r\n        this.$set(todo, 'isEdit', true)\r\n      }\r\n      // 因为Vue会将这个函数执行走完才会去解析模板，而在给输入框获取焦点时，输入框还没有显示在页面上，所以不奏效，可以用延迟定时器解决\r\n      // setTimeout(() => {\r\n      //   this.$refs.inputTitle.focus()\r\n      // }, 200)\r\n\r\n      // 官方提供的一个解决方法\r\n      // nextTick中的回调函数会在DOM节点更新之后执行\r\n      this.$nextTick(function () {\r\n\r\n      })\r\n      // 页面不会实时刷新\r\n      // todo.isEdit = true\r\n    },\r\n    // 失去焦点回调（真正执行修改逻辑）\r\n    handleBlur(todo, e) {\r\n      todo.isEdit = false\r\n      if (!e.target.value.trim()) return alert('输入不能为空！')\r\n      this.$bus.$emit('updateTodo', todo.id, e.target.value)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/*item*/\r\nli {\r\n  list-style: none;\r\n  height: 36px;\r\n  line-height: 36px;\r\n  padding: 0 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nli label {\r\n  float: left;\r\n  cursor: pointer;\r\n}\r\n\r\nli label li input {\r\n  vertical-align: middle;\r\n  margin-right: 6px;\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n\r\nli button {\r\n  float: right;\r\n  display: none;\r\n  margin-top: 3px;\r\n}\r\n\r\nli:before {\r\n  content: initial;\r\n}\r\n\r\nli:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\nli:hover {\r\n  background-color: #cccccc;\r\n}\r\n\r\nli:hover button {\r\n  display: block;\r\n}\r\n</style>"],"mappings":"AAmBA,OAAAA,MAAA;AACA,SAAAC,QAAA;AAEA;EACAC,IAAA;EACA;EACAC,KAAA;EACAC,OAAA;IACA;IACAC,YAAAC,EAAA;MACA;MACA,KAAAC,IAAA,CAAAC,KAAA,aAAAF,EAAA;IACA;IACA;IACAG,aAAAH,EAAA;MACA,IAAAI,OAAA;QACA;QACA;QACA;QACAV,MAAA,CAAAW,OAAA,eAAAL,EAAA;MACA;IACA;IACA;IACAM,WAAAC,IAAA;MACA;MACA,IAAAA,IAAA,CAAAC,cAAA,CAAAC,IAAA;QACAC,OAAA,CAAAC,GAAA;QACAJ,IAAA,CAAAK,MAAA;MACA;QACAF,OAAA,CAAAC,GAAA;QACA,KAAAE,IAAA,CAAAN,IAAA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA,KAAAO,SAAA,cAEA;MACA;MACA;IACA;;IACA;IACAC,WAAAR,IAAA,EAAAS,CAAA;MACAT,IAAA,CAAAK,MAAA;MACA,KAAAI,CAAA,CAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA,WAAAC,KAAA;MACA,KAAAnB,IAAA,CAAAC,KAAA,eAAAK,IAAA,CAAAP,EAAA,EAAAgB,CAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}